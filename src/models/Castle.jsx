/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: Alok (https://sketchfab.com/alok.aks50)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/skycastle-e428dfef6a77408ea0da8172d51a450f
Title: SkyCastle
*/

import React, { useRef, useEffect } from 'react'
import { useGLTF } from '@react-three/drei'
import { useFrame, useThree } from '@react-three/fiber'
import { a } from '@react-spring/three'

import castleScene from '../assets/3d/skycastle.glb';

const Castle = ({isRotating, setIsRotating, ...props}) => {
  const castle = useRef();

  const {gl, viewport} = useThree();
  const { nodes, materials } = useGLTF(castleScene);
  const lastX = useRef(0);
  const rotationSpeed = useRef(0); 
  const dampingFactor = 0.95;

  const handlePointerDown = (e) =>{
    e.stopPropagation();
    e.preventDefault();
    setIsRotating(true);

    const clientX = e.touches 
    ? e.touches[0].clientX
    : e.clientX;
    lastX.current = clientX;
  }

  const handlePointerUp = (e) => {
    e.stopPropagation();
    e.preventDefault();
    setIsRotating(false);
  };

  const handlePointerMove = (e) => {
    e.stopPropagation();
    e.preventDefault();
    if (isRotating) {
      // If rotation is enabled, calculate the change in clientX position
      const clientX = e.touches ? e.touches[0].clientX : e.clientX;

      // calculate the change in the horizontal position of the mouse cursor or touch input,
      // relative to the viewport's width
      const delta = (clientX - lastX.current) / viewport.width;

      // Update the island's rotation based on the mouse/touch movement
      islandRef.current.rotation.y += delta * 0.01 * Math.PI;

      // Update the reference for the last clientX position
      lastX.current = clientX;

      // Update the rotation speed
      rotationSpeed.current = delta * 0.01 * Math.PI;
    }
  };

  const handleKeyDown = (e) =>{
    if(e.key === 'ArrowLeft'){
      if(!isRotating) setIsRotating(true);
      castle.current.rotation.y += 0.01 * Math.PI;
  }
  else if(e.key === 'ArrowRight'){
    if(!isRotating) setIsRotating(true);
    castle.current.rotation.y -= 0.01 * Math.PI;
    }
  }

  const handleKeyUp = (e) =>{
    if(e.key === 'ArrowLeft' || e.key === 'ArrowRight'){
      setIsRotating(false);
    }
  };

  useFrame(()=>{
    if(!isRotating){
      rotationSpeed.current *= dampingFactor;

      if(Math.abs(rotationSpeed.current)<0.001){
        rotationSpeed.current = 0;
      }
      castle.current.rotation.y += rotationSpeed.current
  }
  else{

    const rotation = castle.current.rotation.y;
/**
       * Normalize the rotation value to ensure it stays within the range [0, 2 * Math.PI].
       * The goal is to ensure that the rotation value remains within a specific range to
       * prevent potential issues with very large or negative rotation values.
       *  Here's a step-by-step explanation of what this code does:
       *  1. rotation % (2 * Math.PI) calculates the remainder of the rotation value when divided
       *     by 2 * Math.PI. This essentially wraps the rotation value around once it reaches a
       *     full circle (360 degrees) so that it stays within the range of 0 to 2 * Math.PI.
       *  2. (rotation % (2 * Math.PI)) + 2 * Math.PI adds 2 * Math.PI to the result from step 1.
       *     This is done to ensure that the value remains positive and within the range of
       *     0 to 2 * Math.PI even if it was negative after the modulo operation in step 1.
       *  3. Finally, ((rotation % (2 * Math.PI)) + 2 * Math.PI) % (2 * Math.PI) applies another
       *     modulo operation to the value obtained in step 2. This step guarantees that the value
       *     always stays within the range of 0 to 2 * Math.PI, which is equivalent to a full
       *     circle in radians.
       */
const normalizedRotation = ((rotation % (2 * Math.PI)) + 2 * Math.PI) % (2 * Math.PI);

// Set the current stage based on the island's orientation
switch (true) {
case normalizedRotation >= 5.45 && normalizedRotation <= 5.85:
  setCurrentStage(4);
  break;
case normalizedRotation >= 0.85 && normalizedRotation <= 1.3:
  setCurrentStage(3);
  break;
case normalizedRotation >= 2.4 && normalizedRotation <= 2.6:
  setCurrentStage(2);
  break;
case normalizedRotation >= 4.25 && normalizedRotation <= 4.75:
  setCurrentStage(1);
  break;
default:
  setCurrentStage(null);
}
}
});

  useEffect(()=>{

    const canvas = gl.domElement

    canvas.addEventListener('pointerdown', handlePointerDown);
    canvas.addEventListener('pointerup', handlePointerUp);
    canvas.addEventListener('pointermove', handlePointerMove);
   document.addEventListener('keydown', handleKeyDown);
   document.addEventListener('keyup', handleKeyUp);

   return () => {
    canvas.removeEventListener('pointerdown', handlePointerDown);
    canvas.removeEventListener('pointerup', handlePointerUp);
    canvas.removeEventListener('pointermove', handlePointerMove);
    document.removeEventListener('keydown', handleKeyDown);
    document.removeEventListener('keyup', handleKeyUp);
   }

  },[gl, handlePointerDown, handlePointerUp, handlePointerMove]);




  return (
    <a.group ref={castle}  {...props} >
      <group rotation={[-Math.PI / 2, 0, 0]}>
        <mesh
          geometry={nodes.Object_2.geometry}
          material={materials.lambert2SG}
        />
        <mesh
          geometry={nodes.Object_3.geometry}
          material={materials.lambert2SG}
        />
        <mesh
          geometry={nodes.Object_4.geometry}
          material={materials.lambert2SG}
        />
        <mesh
          geometry={nodes.Object_5.geometry}
          material={materials.lambert2SG}
        />
        <mesh
          geometry={nodes.Object_6.geometry}
          material={materials.lambert2SG}
        />
        <mesh
          geometry={nodes.Object_7.geometry}
          material={materials.lambert2SG}
        />
        <mesh
          geometry={nodes.Object_8.geometry}
          material={materials.lambert2SG}
        />
        <mesh
          geometry={nodes.Object_9.geometry}
          material={materials.lambert2SG}
        />
        <mesh
          geometry={nodes.Object_10.geometry}
          material={materials.lambert2SG}
        />
        <mesh
          geometry={nodes.Object_11.geometry}
          material={materials.lambert2SG}
        />
        <mesh
          geometry={nodes.Object_12.geometry}
          material={materials.lambert2SG}
        />
        <mesh
          geometry={nodes.Object_13.geometry}
          material={materials.lambert2SG}
        />
        <mesh
          geometry={nodes.Object_14.geometry}
          material={materials.lambert2SG}
        />
        <mesh
          geometry={nodes.Object_15.geometry}
          material={materials.lambert2SG}
        />
        <mesh
          geometry={nodes.Object_16.geometry}
          material={materials.lambert2SG}
        />
        <mesh
          geometry={nodes.Object_17.geometry}
          material={materials.lambert2SG}
        />
        <mesh
          geometry={nodes.Object_18.geometry}
          material={materials.lambert2SG}
        />
      </group>
    </a.group>
  )
}

useGLTF.preload('/skycastle.glb')

export default Castle
